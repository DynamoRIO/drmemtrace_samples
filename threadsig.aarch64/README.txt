Sample aarch64 trace directory contents:
+ drmemtrace.threadsig.50303.9157.dir/trace/* == the trace itself, with a
  separate file per application thread.
+ drmemtrace.threadsig.50303.9157.dir/raw/modules.log == the list of libraries
  mapped into the application address space.
+ binaries/ == binaries for the librares listed in the modules.log file.
+ threadsig.cpp == the source code of the traced application.
+ README.txt == this file.

The memory address tracer we use is part of the "drcachesim" open-source
tool [1], which is part of the DynamoRIO dynamic binary instrumentation
framework [2].

The trace format used by analysis tools is the memref_t structure [3].  A
simple analysis tool to look at is basic_counts.cpp [4].

A low-level textual view of the sample trace:
--------------------------------------------------
  $ bin64/drrun -t drcachesim -indir drmemtrace*.dir -verbose 3 2>&1 | less
  ::0.0:: marker type 9 value 8
  ::50303.50303:: marker type 2 value 13240358796016328
  ::50303.50303:: marker type 3 value 18
  new thread 50303 => core 0 (count=0)
  ::50303.50303::  @0x400678 instr x4
  ::50303.50303::  @0x40067c instr x4
  ::50303.50303::  @0x400680 instr x4
  ::50303.50303::  @0x400684 instr x4
  ::50303.50303::  @0x400684 read 0xfffffde64f70 x8
  ::50303.50303::  @0x400688 instr x4
  <...>
  ::50303.50303::  @0x42e264 instr x4
  ::50303.50303::  @0x42e268 instr x4
  ::50303.50303::  @0x42e26c instr x4
  ::50303.50303:: marker type 9 value 8
  ::50303.50305:: marker type 2 value 13240358796060368
  ::50303.50305:: marker type 3 value 19
  new thread 50305 => core 1 (count=0)
  ::50303.50305::  @0x42e270 instr x4
  ::50303.50305::  @0x42e274 instr x4
  ::50303.50305::  @0x42e290 instr x4
  ::50303.50305::  @0x42e294 instr x4
  ::50303.50305::  @0x42e298 instr x4
  ::50303.50305::  @0x401d10 instr x4
  ::50303.50305::  @0x401d10 write 0xfffbb6d3e880 x16
  ::50303.50305::  @0x401d14 instr x4
  ::50303.50305::  @0x401d18 instr x4
  ::50303.50305::  @0x401d1c instr x4
  ::50303.50305::  @0x401d1c read 0x4a5fd8 x8
  <...>
--------------------------------------------------

It is a series of instruction fetch, data fetch, and metadata entries.  The
fetches contain addresses and sizes ("x4" is a size in the verbose
listing).  The addresses are all virtual.  The metadata
"markers" indicate things like which core a thread executed on, timestamps,
an arriving signal causing a PC discontinuity, etc.

For using a trace in a core simulator, you will want to obtain the opcodes.
These are not part of the base trace.  They are obtained by decoding the
instruction fetch addresses from the binaries.  Library support makes this
straightforward.  A sample tool that does this is opcode_mix.cpp [5].  It
uses library routines to read the "modules.log" file, which contains the
mappings of the binary and libraries from the traced execution, and map
those binaries into the address space, allowing examining the instruction
bytes.  The modules.log file is included here, along with all of the
binaries referenced there.  For the vdso the raw bytes are embedded in the
file and mapped in just like the binaries.

Other aspects of the trace which help core simulation are discussed in our
documentation [6].

The sample trace here is small but includes corner cases of thread
interleavings, signals, and "non-fetched" instructions.  The trace is from
the "threadsig" application whose source code is included.  It is an
adaptation of [7] with extra threads, signals, and string loop
instructions.

The trace was generated by running:
  $ bin64/drrun -t drcachesim -offline -- ./threadsig 20 200000

Counts of event types in the trace:
  $ bin64/drrun -t drcachesim -indir drmemtrace*.dir -simulator_type basic_counts
  Basic counts tool results:                                                       
  Total counts:                                                                    
      12051303 total (fetched) instructions
          6411 total unique (fetched) instructions
             0 total non-fetched instructions
             0 total prefetches                                                    
        210751 total data loads        
       1807181 total data stores  
            21 total threads                                                       
          2018 total scheduling markers                                            
            10 total transfer markers                                              
             0 total function id markers
             0 total function return address markers
             0 total function argument markers                                     
             0 total function return value markers                                 
            21 total other markers                                                 
  Thread 50309 counts:            
        600334 (fetched) instructions                                              
           374 unique (fetched) instructions
  <...>

Top opcodes in the trace:
  $ bin64/drrun -t drcachesim -indir drmemtrace*.dir -simulator_type opcode_mix -module_file drmemtrace*.dir/raw/modules.log
  Opcode mix tool results:
         12051303 : total executed instructions
          1604715 :     bcond
          1405663 :       add
          1403934 :      subs
          1403183 :       stp
           800681 :       and
           800039 :       sys
           600176 :        xx
           403294 :       str
           401750 :      movz
  <...>

The "xx" is part of a set of opcodes not yet added to the decoder [8].

You can run any of the commands above yourself by downloading DynamoRIO
[9].

References from above:

[1] = http://dynamorio.org/dynamorio_docs/page_drcachesim.html
[1] = http://dynamorio.org
[3] = http://dynamorio.org/dynamorio_docs/union__memref__t.html
(source: https://github.com/DynamoRIO/dynamorio/blob/master/clients/drcachesim/common/memref.h)
[4] = https://github.com/DynamoRIO/dynamorio/blob/master/clients/drcachesim/tools/basic_counts.cpp
[5] = https://github.com/DynamoRIO/dynamorio/blob/master/clients/drcachesim/tools/opcode_mix.cpp
[6] = http://dynamorio.org/dynamorio_docs/page_drcachesim.html#sec_drcachesim_core
[7] = https://github.com/DynamoRIO/dynamorio/blob/master/suite/tests/pthreads/ptsig.c
[8] = https://github.com/DynamoRIO/dynamorio/issues/2626
[9] = https://github.com/DynamoRIO/dynamorio/releases/latest
